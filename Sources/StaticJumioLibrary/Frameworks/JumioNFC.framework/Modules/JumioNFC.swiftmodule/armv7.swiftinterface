// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JumioNFC
import CoreNFC
import Foundation
@_exported import JumioNFC
import JumioNFC.Private
import Swift
import SwiftUI
import UIKit
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NFCPassportModel : ObjectiveC.NSObject {
  public var readDataGroups: [Swift.String] {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  @objc public var personalNumber: Swift.String {
    get
  }
  @objc public var documentNumber: Swift.String {
    get
  }
  @objc public var issuingAuthority: Swift.String {
    get
  }
  @objc public var issuingDate: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  @objc public var placeOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  @objc public var nationality: Swift.String {
    get
  }
  @objc public var lastName: Swift.String {
    get
  }
  @objc public var firstName: Swift.String {
    get
  }
  @objc public var mrzLines: Swift.String {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  @objc public var passiveAuthenticationPassed: Swift.Bool {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  @objc public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  @objc public var countrySigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var documentSigningCertificate: [JumioNFC.CertificateItem : Swift.String]? {
    get
  }
  public var countrySigningCertificate: [JumioNFC.CertificateItem : Swift.String]? {
    get
  }
  @objc public var dataGroupHashesChecked: [Swift.String : Swift.Bool] {
    get
  }
  public var dataGroupHashes: [Swift.UInt8 : JumioNFC.DataGroupHash] {
    get
  }
  @objc public var trustScore: Swift.Int {
    get
  }
  @objc public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  @objc public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public var accessControl: Swift.String {
    get
  }
  public var hasPACEInformation: Swift.Bool {
    get
  }
  public var paceProtocol: Swift.String {
    get
  }
  public var paceVersion: Swift.String {
    get
  }
  public var paceDomainParameter: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 13, *)
@objc(PassportReader) public class PassportReader : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func readPassport(mrzKey: Swift.String, dataGroupsToRead: [Swift.UInt8], certificateData: Foundation.Data, localizations: [Swift.String : Swift.String], silentlyFail: Swift.Bool, callback: JumioNFC.NVPassportReaderCallback)
  @objc public func cancelScan()
  @objc deinit
}
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum TagError : Swift.Error {
  case ResponseError(Swift.String)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case SessionTimeout
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case InvalidPACEInfo
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case CannotSelectApplication
  case UnableToReadPACEInfo
  case UnsupportedPACEProtocol(Swift.String)
  case TagConnectionLost
}
public struct LogInformation {
  public var accessControl: Swift.String
  public var paceProtocol: Swift.String
  public var paceVersion: Swift.String
  public var paceDomain: Swift.String
  public var passiveAuthentication: Swift.Bool
  public var activeAuthentication: Swift.Bool
  public init()
}
@_hasMissingDesignatedInitializers public class Log {
  public class func flush(_ filename: Swift.String, information: JumioNFC.LogInformation, completion: ((Swift.Bool) -> Swift.Void)?)
  @objc deinit
}
extension JumioNFC.CertificateItem : Swift.Equatable {}
extension JumioNFC.CertificateItem : Swift.Hashable {}
extension JumioNFC.CertificateItem : Swift.RawRepresentable {}
